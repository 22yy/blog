import{_ as t}from"./plugin-vue_export-helper.21dcd24c.js";import{o as e,c as p,a as n,b as o,d as s,e as c,r as i}from"./app.0b0fc47d.js";const l={},u=n("h1",{id:"\u7FFB\u8F6C\u4E8C\u53C9\u6811",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u7FFB\u8F6C\u4E8C\u53C9\u6811","aria-hidden":"true"},"#"),s(" \u7FFB\u8F6C\u4E8C\u53C9\u6811")],-1),r=n("h2",{id:"_226-\u7FFB\u8F6C\u4E8C\u53C9\u6811",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_226-\u7FFB\u8F6C\u4E8C\u53C9\u6811","aria-hidden":"true"},"#"),s(" 226.\u7FFB\u8F6C\u4E8C\u53C9\u6811")],-1),k={href:"https://leetcode.cn/problems/invert-binary-tree/",target:"_blank",rel:"noopener noreferrer"},d=s("\u9898\u76EE\u8FDE\u63A5"),v=c(`<h3 id="\u5C42\u5E8F\u904D\u5386" tabindex="-1"><a class="header-anchor" href="#\u5C42\u5E8F\u904D\u5386" aria-hidden="true">#</a> \u5C42\u5E8F\u904D\u5386</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">invertTree</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">swap</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span>left<span class="token punctuation">,</span>right</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">let</span> temp<span class="token operator">=</span>left<span class="token punctuation">;</span>
      left<span class="token operator">=</span>right<span class="token punctuation">;</span>
      right<span class="token operator">=</span>temp<span class="token punctuation">;</span>
      root<span class="token punctuation">.</span>left<span class="token operator">=</span>left<span class="token punctuation">;</span>
      root<span class="token punctuation">.</span>right<span class="token operator">=</span>right<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>
  <span class="token keyword">let</span> queue<span class="token operator">=</span><span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">let</span> n<span class="token operator">=</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token keyword">let</span> node<span class="token operator">=</span>queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">swap</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
          node<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
          node<span class="token punctuation">.</span>right <span class="token operator">&amp;&amp;</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u9012\u5F52" tabindex="-1"><a class="header-anchor" href="#\u9012\u5F52" aria-hidden="true">#</a> \u9012\u5F52</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">invertTree</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>
  <span class="token keyword">const</span> left<span class="token operator">=</span><span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> right<span class="token operator">=</span><span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
  root<span class="token punctuation">.</span>right<span class="token operator">=</span>left<span class="token punctuation">;</span>
  root<span class="token punctuation">.</span>left<span class="token operator">=</span>right<span class="token punctuation">;</span>
  <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function m(h,b){const a=i("ExternalLinkIcon");return e(),p("div",null,[u,r,n("p",null,[n("a",k,[d,o(a)])]),v])}var w=t(l,[["render",m],["__file","\u7FFB\u8F6C\u4E8C\u53C9\u68114.html.vue"]]);export{w as default};
