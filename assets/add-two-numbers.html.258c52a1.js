import{_ as e}from"./plugin-vue_export-helper.21dcd24c.js";import{o as p,c as t,a as n,b as o,d as s,e as c,r as l}from"./app.0070c4d9.js";const i={},r=n("h1",{id:"_1-\u4E24\u6570\u76F8\u52A0",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-\u4E24\u6570\u76F8\u52A0","aria-hidden":"true"},"#"),s(" 1.\u4E24\u6570\u76F8\u52A0")],-1),u=n("h2",{id:"_2-\u4E24\u6570\u76F8\u52A0",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-\u4E24\u6570\u76F8\u52A0","aria-hidden":"true"},"#"),s(" 2.\u4E24\u6570\u76F8\u52A0")],-1),d={href:"https://leetcode.cn/problems/add-two-numbers/",target:"_blank",rel:"noopener noreferrer"},k=s("\u9898\u76EE\u94FE\u63A5"),v=c(`<p>\u9898\u76EE\u63CF\u8FF0\uFF1A</p><p>\u7ED9\u51FA\u4E24\u4E2A \u975E\u7A7A \u7684\u94FE\u8868\u7528\u6765\u8868\u793A\u4E24\u4E2A\u975E\u8D1F\u7684\u6574\u6570\u3002\u5176\u4E2D\uFF0C\u5B83\u4EEC\u5404\u81EA\u7684\u4F4D\u6570\u662F\u6309\u7167 \u9006\u5E8F \u7684\u65B9\u5F0F\u5B58\u50A8\u7684\uFF0C\u5E76\u4E14\u5B83\u4EEC\u7684\u6BCF\u4E2A\u8282\u70B9\u53EA\u80FD\u5B58\u50A8 \u4E00\u4F4D \u6570\u5B57\u3002</p><p>\u5982\u679C\uFF0C\u6211\u4EEC\u5C06\u8FD9\u4E24\u4E2A\u6570\u76F8\u52A0\u8D77\u6765\uFF0C\u5219\u4F1A\u8FD4\u56DE\u4E00\u4E2A\u65B0\u7684\u94FE\u8868\u6765\u8868\u793A\u5B83\u4EEC\u7684\u548C\u3002</p><p>\u60A8\u53EF\u4EE5\u5047\u8BBE\u9664\u4E86\u6570\u5B57 0 \u4E4B\u5916\uFF0C\u8FD9\u4E24\u4E2A\u6570\u90FD\u4E0D\u4F1A\u4EE5 0 \u5F00\u5934\u3002</p><p>\u793A\u4F8B\uFF1A</p><p>\u8F93\u5165\uFF1A(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4) \u8F93\u51FA\uFF1A7 -&gt; 0 -&gt; 8 \u539F\u56E0\uFF1A342 + 465 = 807</p><h3 id="\u601D\u8DEF" tabindex="-1"><a class="header-anchor" href="#\u601D\u8DEF" aria-hidden="true">#</a> \u601D\u8DEF</h3><p>\u540C\u65F6\u904D\u5386\u4E24\u4E2A\u94FE\u8868\uFF0C\u5982\u679C\u4E24\u94FE\u8868\u957F\u5EA6\u4E0D\u540C\uFF0C\u77ED\u94FE\u8868\u4F1A\u5148\u4E3A\u7A7A\uFF0C\u6B64\u65F6\u53EF\u4EE5\u75280\u6765\u4EE3\u66FF\uFF0C\u9700\u8981\u5728while\u5185\u90E8\u5224\u65AD\u4E00\u4E0B\u94FE\u8868\u662F\u5426\u4E3A\u7A7A\uFF0C\u82E5\u662F\u5219\u4E3A0</p><p>\u7528\u4E00\u4E2A\u53D8\u91CFcarry\u8868\u793A\u6EA2\u51FA\u7684\u8FDB\u4F4D\uFF0C\u5F53\u4E24\u4E2A\u94FE\u8868\u90FD\u904D\u5386\u7ED3\u675F\uFF0C\u82E5carry\u4E3A1\uFF0C\u5219\u9700\u8981\u518D\u5C06\u8FDB\u4F4D\u7B97\u8FDB\u53BB\u3002</p><p>\u89E3\u6CD5\u4E2D\u5C06carry\u653E\u5728\u4E86while\u5FAA\u73AF\u6761\u4EF6\u4E0A\uFF0C\u5F53p1=null, p2=null, carry\u4E3A1\u65F6\uFF0C\u4F9D\u7136\u8FDB\u5165\u5FAA\u73AF</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code> <span class="token doc-comment comment">/**
 * Definition for singly-linked list.
 * function ListNode(val, next) <span class="token punctuation">{</span>
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * <span class="token punctuation">}</span>
 */</span>
<span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span> <span class="token parameter">l1</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span> <span class="token parameter">l2</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">addTwoNumbers</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">l1<span class="token punctuation">,</span> l2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">let</span> dummy<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">let</span> p<span class="token operator">=</span>dummy<span class="token punctuation">;</span>
 <span class="token keyword">let</span> p1<span class="token operator">=</span>l1<span class="token punctuation">,</span>p2<span class="token operator">=</span>l2<span class="token punctuation">;</span>
 <span class="token keyword">let</span> carry<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//\u6682\u5B58\u8FDB\u4F4D</span>
 <span class="token keyword">while</span><span class="token punctuation">(</span>p1<span class="token operator">||</span>p2<span class="token operator">||</span>carry<span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token keyword">let</span> p1val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
     <span class="token keyword">let</span> p2val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
     <span class="token keyword">let</span> cur<span class="token punctuation">;</span><span class="token comment">//\u6682\u5B58\u7ED3\u679C</span>
     <span class="token keyword">if</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">{</span>
         p1val<span class="token operator">=</span>p1<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
         p1<span class="token operator">=</span>p1<span class="token punctuation">.</span>next
     <span class="token punctuation">}</span>
     <span class="token keyword">if</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">{</span>
         p2val<span class="token operator">=</span>p2<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
         p2<span class="token operator">=</span>p2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
     cur<span class="token operator">=</span>p1val<span class="token operator">+</span>p2val<span class="token operator">+</span>carry<span class="token punctuation">;</span>
     <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">&gt;=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
         cur<span class="token operator">%=</span><span class="token number">10</span><span class="token punctuation">;</span>
         carry<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
     <span class="token keyword">else</span><span class="token punctuation">{</span>
         carry<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
     dummy<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
     dummy<span class="token operator">=</span>dummy<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 <span class="token keyword">return</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function m(b,y){const a=l("ExternalLinkIcon");return p(),t("div",null,[r,u,n("p",null,[n("a",d,[k,o(a)])]),v])}var _=e(i,[["render",m],["__file","add-two-numbers.html.vue"]]);export{_ as default};
