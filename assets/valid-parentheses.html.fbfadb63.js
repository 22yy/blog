import{_ as p}from"./plugin-vue_export-helper.21dcd24c.js";import{o as t,c as e,a as n,b as o,d as s,e as c,r as l}from"./app.0070c4d9.js";const u={},i=n("h1",{id:"_3-\u6709\u6548\u7684\u62EC\u53F7",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-\u6709\u6548\u7684\u62EC\u53F7","aria-hidden":"true"},"#"),s(" 3.\u6709\u6548\u7684\u62EC\u53F7")],-1),k=n("h2",{id:"_20-\u6709\u6548\u7684\u62EC\u53F7",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_20-\u6709\u6548\u7684\u62EC\u53F7","aria-hidden":"true"},"#"),s(" 20 \u6709\u6548\u7684\u62EC\u53F7")],-1),r={href:"https://leetcode.cn/problems/valid-parentheses/",target:"_blank",rel:"noopener noreferrer"},d=s("\u9898\u76EE\u94FE\u63A5"),v=c(`<p>\u9898\u76EE\u63CF\u8FF0\uFF1A</p><p>\u7ED9\u5B9A\u4E00\u4E2A\u53EA\u5305\u62EC &#39;(&#39;\uFF0C&#39;)&#39;\uFF0C&#39;{&#39;\uFF0C&#39;}&#39;\uFF0C&#39;[&#39;\uFF0C&#39;]&#39;\xA0\u7684\u5B57\u7B26\u4E32\uFF0C\u5224\u65AD\u5B57\u7B26\u4E32\u662F\u5426\u6709\u6548\u3002</p><p>\u6709\u6548\u5B57\u7B26\u4E32\u9700\u6EE1\u8DB3\uFF1A</p><p>\u5DE6\u62EC\u53F7\u5FC5\u987B\u7528\u76F8\u540C\u7C7B\u578B\u7684\u53F3\u62EC\u53F7\u95ED\u5408\u3002 \u5DE6\u62EC\u53F7\u5FC5\u987B\u4EE5\u6B63\u786E\u7684\u987A\u5E8F\u95ED\u5408\u3002</p><p>\u6CE8\u610F\u7A7A\u5B57\u7B26\u4E32\u53EF\u88AB\u8BA4\u4E3A\u662F\u6709\u6548\u5B57\u7B26\u4E32\u3002</p><p>\u793A\u4F8B 1:</p><p>\u8F93\u5165: &quot;()&quot; \u8F93\u51FA: true</p><p>\u793A\u4F8B\xA02:</p><p>\u8F93\u5165: &quot;()[]{}&quot; \u8F93\u51FA: true</p><p>\u793A\u4F8B\xA03:</p><p>\u8F93\u5165: &quot;(]&quot; \u8F93\u51FA: false</p><p>\u793A\u4F8B\xA04:</p><p>\u8F93\u5165: &quot;([)]&quot; \u8F93\u51FA: false</p><p>\u793A\u4F8B\xA05:</p><p>\u8F93\u5165: &quot;{[]}&quot; \u8F93\u51FA: true</p><h3 id="\u7528\u6808\u548Cmap" tabindex="-1"><a class="header-anchor" href="#\u7528\u6808\u548Cmap" aria-hidden="true">#</a> \u7528\u6808\u548Cmap</h3><p>s\u957F\u5EA6\u4E3A\u5947\u6570\u65F6\uFF0C\u53EF\u76F4\u63A5\u6392\u9664</p><p>\u904D\u5386\u5B57\u7B26\u4E32s,\u9047\u5230\u5DE6\u62EC\u53F7\u65F6\uFF0C\u4F1A\u671F\u671B\u5728\u540E\u5E8F\u904D\u5386\u4E2D\u6709\u4E00\u4E2A\u76F8\u540C\u7C7B\u578B\u7684 \u53F3\u62EC\u53F7\u5C06\u5176\u95ED\u5408\uFF0C\u5C06\u76F8\u5E94\u7684\u53F3\u62EC\u53F7push\u8FDBstack</p><p>\u9047\u5230\u53F3\u62EC\u53F7\u65F6\uFF0C\u53D6\u51FA\u6808\u9876\u7684\u53F3\u62EC\u53F7\u5224\u65AD\u662F\u5426\u76F8\u7B49</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">isValid</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">const</span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>length<span class="token operator">%</span><span class="token number">2</span><span class="token operator">!==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;(&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;[&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;{&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">let</span> stack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
 <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
         stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
         <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!==</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
<span class="token keyword">return</span> stack<span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token number">2.</span>\u5927\u4F6C\u7684\u601D\u8DEF
<span class="token keyword">var</span> <span class="token function-variable function">isValid</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       <span class="token keyword">let</span> l<span class="token operator">=</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
       s<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;()&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       s<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       s<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;[]&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>length<span class="token operator">===</span>l<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> l<span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
 
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21);function m(b,h){const a=l("ExternalLinkIcon");return t(),e("div",null,[i,k,n("p",null,[n("a",r,[d,o(a)])]),v])}var g=p(u,[["render",m],["__file","valid-parentheses.html.vue"]]);export{g as default};
